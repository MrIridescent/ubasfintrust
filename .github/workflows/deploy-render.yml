name: Deploy Backend to Render

on:
  push:
    branches: [ "main" ]
    paths:
      - 'clean/server/**'
      - 'clean/render.yaml'

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: clean
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            clean/server/package-lock.json

      - name: Install backend deps
        run: npm ci
        working-directory: clean/server

      - name: Build backend
        run: npm run build
        working-directory: clean/server

      - name: Test backend
        run: npm test --silent
        env:
          CI: true
        working-directory: clean/server

      - name: Trigger Render deploy(s)
        if: success()
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          bash scripts/deploy-render.sh

      - name: Determine Backend URL
        id: backend
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          BACKEND_URL: ${{ secrets.RENDER_BACKEND_URL }}
        run: |
          set -euo pipefail
          if [ -n "${BACKEND_URL:-}" ]; then
            echo "url=${BACKEND_URL}" >> "$GITHUB_OUTPUT"
          elif [ -n "${RENDER_API_KEY:-}" ]; then
            api="https://api.render.com/v1"
            url=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" "$api/services" | \
              jq -r '.[] | select(.serviceType=="web_service" and .name=="ubas-backend") | .serviceDetails.url' | head -1)
            if [ -z "$url" ] || [ "$url" = "null" ]; then
              echo "Could not determine backend URL" >&2; exit 1;
            fi
            echo "url=$url" >> "$GITHUB_OUTPUT"
          else
            echo "No BACKEND_URL or RENDER_API_KEY provided" >&2; exit 1
          fi

      - name: Post-deploy smoke tests
        env:
          BACKEND_URL: ${{ steps.backend.outputs.url }}
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          DIAGNOSTICS_TOKEN: ${{ secrets.DIAGNOSTICS_TOKEN }}
        run: |
          bash scripts/post-deploy-smoke.sh
