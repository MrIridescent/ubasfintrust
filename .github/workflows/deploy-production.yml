name: Deploy Production

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'server/**'
      - 'src/**'
      - '.github/workflows/deploy-production.yml'
      - 'render.yaml'

concurrency:
  group: deploy-production
  cancel-in-progress: false

env:
  API_VERSION: v1

jobs:
  preflight:
    name: Preflight Quality Gates
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install deps (root + server)
        run: |
          npm install
          cd server && npm install
      - name: Type check
        run: |
          npx tsc --noEmit
          cd server && npx tsc --noEmit
      - name: Build frontend
        run: npm run build
      - name: Build backend
        run: cd server && npm run build
      - name: Setup Postgres (dry run migrations)
        uses: harmon758/postgresql-action@v1
        with:
          postgresql version: '15'
          postgresql db: 'provi_banking'
          postgresql user: 'postgres'
          postgresql password: 'postgres'
      - name: Run migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/provi_banking
        run: cd server && npx knex migrate:latest
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist
            server/dist

  migrate-production:
    name: Apply Production DB Migrations (Supabase)
    runs-on: ubuntu-latest
    needs: preflight
    steps:
      - uses: actions/checkout@v5
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install server deps only
        run: |
          cd server && npm install
      - name: Run migrations against production DB (if secret present)
        env:
          DB_PRIMARY: ${{ secrets.DATABASE_URL }}
          DB_ALT: ${{ secrets.PROD_DATABASE_URL }}
        run: |
          DB_URL="$DB_PRIMARY"; if [ -z "$DB_URL" ]; then DB_URL="$DB_ALT"; fi
          if [ -z "$DB_URL" ]; then echo "No production DATABASE_URL secret set (DATABASE_URL or PROD_DATABASE_URL). Skipping."; exit 0; fi
          echo "Using production database (URL hidden). Applying migrations..."
          cd server
          DATABASE_URL="$DB_URL" npx knex migrate:latest
      - name: Verify no pending migrations
        env:
          DB_PRIMARY: ${{ secrets.DATABASE_URL }}
          DB_ALT: ${{ secrets.PROD_DATABASE_URL }}
        run: |
          DB_URL="$DB_PRIMARY"; if [ -z "$DB_URL" ]; then DB_URL="$DB_ALT"; fi
          if [ -z "$DB_URL" ]; then echo "No production DATABASE_URL secret set. Skipping verification."; exit 0; fi
          cd server
          echo "Verifying migration status..."
          DATABASE_URL="$DB_URL" npm run migrate:verify
      - name: Output status summary
        run: echo "Production migrations step complete." 

  deploy-backend-render:
    name: Deploy Backend (Render)
    runs-on: ubuntu-latest
    needs: [preflight, migrate-production]
    steps:
      - name: Trigger Render deploy hook (skip if unset)
        env:
          HOOK_URL: ${{ secrets.RENDER_BACKEND_DEPLOY_HOOK_URL }}
        run: |
          if [ -z "$HOOK_URL" ]; then echo "No hook set, skipping backend deploy"; exit 0; fi
          curl -fsSL -X POST "$HOOK_URL" || exit 1
      - name: Wait for rollout
        run: sleep 30

  deploy-frontend-netlify:
    name: Deploy Frontend (Netlify)
    runs-on: ubuntu-latest
    needs: preflight
  # Netlify deploy only proceeds if auth token & site id are present
    steps:
      - uses: actions/checkout@v5
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install deps
        run: npm install
      - name: Build
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL_PROD }}
          VITE_APP_NAME: UBAS Financial Trust
        run: npm run build
      - name: Deploy via Netlify CLI (skip if secrets missing)
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          if [ -z "$NETLIFY_AUTH_TOKEN" ] || [ -z "$NETLIFY_SITE_ID" ]; then echo "Netlify secrets missing, skipping"; exit 0; fi
          npm install -g netlify-cli
          netlify deploy --dir=dist --prod --auth "$NETLIFY_AUTH_TOKEN" --site "$NETLIFY_SITE_ID"

  post-deploy-smoke:
    name: Post-Deploy Smoke
    runs-on: ubuntu-latest
    needs: [deploy-backend-render, deploy-frontend-netlify]
    if: always()
    steps:
      - name: Backend health
        env:
          PROD_API_HEALTH_URL: ${{ secrets.PROD_API_HEALTH_URL }}
        run: |
          if [ -z "$PROD_API_HEALTH_URL" ]; then echo "No backend health URL set, skipping"; exit 0; fi
          curl -fSL "$PROD_API_HEALTH_URL" || exit 1
      - name: Frontend reachability
        env:
          PROD_FRONTEND_URL: ${{ secrets.PROD_FRONTEND_URL }}
        run: |
          if [ -z "$PROD_FRONTEND_URL" ]; then echo "No frontend URL set, skipping"; exit 0; fi
          curl -I -fSL "$PROD_FRONTEND_URL" || exit 1
      - name: Summary
        run: echo "Deployment pipeline complete." 
